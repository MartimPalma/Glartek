{"ast":null,"code":"const API_BASE_URL = 'http://localhost:3001/api';\n\n// fazer requisições HTTP\nconst makeRequest = async (url, options = {}) => {\n  const response = await fetch(url, {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers\n    },\n    ...options\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.error || 'Erro na requisição');\n  }\n\n  // veerifica se tem conteúdo para retornar\n  const contentType = response.headers.get('content-type');\n  if (contentType && contentType.includes('application/json')) {\n    return await response.json();\n  }\n  return null;\n};\nexport const getAllCrons = async () => {\n  return await makeRequest(`${API_BASE_URL}/crons`);\n};\nexport const createCron = async cronData => {\n  return await makeRequest(`${API_BASE_URL}/crons`, {\n    method: 'POST',\n    body: JSON.stringify(cronData)\n  });\n};\nexport const updateCron = async (cronId, cronData) => {\n  return await makeRequest(`${API_BASE_URL}/crons/${cronId}`, {\n    method: 'PUT',\n    body: JSON.stringify(cronData)\n  });\n};\nexport const deleteCron = async cronId => {\n  return await makeRequest(`${API_BASE_URL}/crons/${cronId}`, {\n    method: 'DELETE'\n  });\n};\n\n// Iniciar ou parar CRON\nexport const toggleCronStatus = async (cronId, isActive) => {\n  const action = isActive ? 'stop' : 'start';\n  return await makeRequest(`${API_BASE_URL}/crons/${cronId}/${action}`, {\n    method: 'POST'\n  });\n};\n\n// Executar CRON manualmente\nexport const executeCron = async cronId => {\n  return await makeRequest(`${API_BASE_URL}/crons/${cronId}/execute`, {\n    method: 'POST'\n  });\n};\n\n// Buscar logs do CRON\nexport const getCronLogs = async cronId => {\n  return await makeRequest(`${API_BASE_URL}/crons/${cronId}/logs`);\n};","map":{"version":3,"names":["API_BASE_URL","makeRequest","url","options","response","fetch","headers","ok","errorData","json","Error","error","contentType","get","includes","getAllCrons","createCron","cronData","method","body","JSON","stringify","updateCron","cronId","deleteCron","toggleCronStatus","isActive","action","executeCron","getCronLogs"],"sources":["C:/Users/marti/OneDrive/Ambiente de Trabalho/Glartek/cron-manager/frontend/src/api/cronApi.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:3001/api';\r\n\r\n// fazer requisições HTTP\r\nconst makeRequest = async (url, options = {}) => {\r\n  const response = await fetch(url, {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...options.headers\r\n    },\r\n    ...options\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.error || 'Erro na requisição');\r\n  }\r\n\r\n  // veerifica se tem conteúdo para retornar\r\n  const contentType = response.headers.get('content-type');\r\n  if (contentType && contentType.includes('application/json')) {\r\n    return await response.json();\r\n  }\r\n  \r\n  return null;\r\n};\r\n\r\nexport const getAllCrons = async () => {\r\n  return await makeRequest(`${API_BASE_URL}/crons`);\r\n};\r\n\r\nexport const createCron = async (cronData) => {\r\n  return await makeRequest(`${API_BASE_URL}/crons`, {\r\n    method: 'POST',\r\n    body: JSON.stringify(cronData)\r\n  });\r\n};\r\n\r\nexport const updateCron = async (cronId, cronData) => {\r\n  return await makeRequest(`${API_BASE_URL}/crons/${cronId}`, {\r\n    method: 'PUT',\r\n    body: JSON.stringify(cronData)\r\n  });\r\n};\r\n\r\nexport const deleteCron = async (cronId) => {\r\n  return await makeRequest(`${API_BASE_URL}/crons/${cronId}`, {\r\n    method: 'DELETE'\r\n  });\r\n};\r\n\r\n// Iniciar ou parar CRON\r\nexport const toggleCronStatus = async (cronId, isActive) => {\r\n  const action = isActive ? 'stop' : 'start';\r\n  return await makeRequest(`${API_BASE_URL}/crons/${cronId}/${action}`, {\r\n    method: 'POST'\r\n  });\r\n};\r\n\r\n// Executar CRON manualmente\r\nexport const executeCron = async (cronId) => {\r\n  return await makeRequest(`${API_BASE_URL}/crons/${cronId}/execute`, {\r\n    method: 'POST'\r\n  });\r\n};\r\n\r\n// Buscar logs do CRON\r\nexport const getCronLogs = async (cronId) => {\r\n  return await makeRequest(`${API_BASE_URL}/crons/${cronId}/logs`);\r\n};\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,2BAA2B;;AAEhD;AACA,MAAMC,WAAW,GAAG,MAAAA,CAAOC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EAC/C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;IAChCI,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,GAAGH,OAAO,CAACG;IACb,CAAC;IACD,GAAGH;EACL,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACG,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,KAAK,IAAI,oBAAoB,CAAC;EAC1D;;EAEA;EACA,MAAMC,WAAW,GAAGR,QAAQ,CAACE,OAAO,CAACO,GAAG,CAAC,cAAc,CAAC;EACxD,IAAID,WAAW,IAAIA,WAAW,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;IAC3D,OAAO,MAAMV,QAAQ,CAACK,IAAI,CAAC,CAAC;EAC9B;EAEA,OAAO,IAAI;AACb,CAAC;AAED,OAAO,MAAMM,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,OAAO,MAAMd,WAAW,CAAC,GAAGD,YAAY,QAAQ,CAAC;AACnD,CAAC;AAED,OAAO,MAAMgB,UAAU,GAAG,MAAOC,QAAQ,IAAK;EAC5C,OAAO,MAAMhB,WAAW,CAAC,GAAGD,YAAY,QAAQ,EAAE;IAChDkB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ;EAC/B,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMK,UAAU,GAAG,MAAAA,CAAOC,MAAM,EAAEN,QAAQ,KAAK;EACpD,OAAO,MAAMhB,WAAW,CAAC,GAAGD,YAAY,UAAUuB,MAAM,EAAE,EAAE;IAC1DL,MAAM,EAAE,KAAK;IACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ;EAC/B,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMO,UAAU,GAAG,MAAOD,MAAM,IAAK;EAC1C,OAAO,MAAMtB,WAAW,CAAC,GAAGD,YAAY,UAAUuB,MAAM,EAAE,EAAE;IAC1DL,MAAM,EAAE;EACV,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMO,gBAAgB,GAAG,MAAAA,CAAOF,MAAM,EAAEG,QAAQ,KAAK;EAC1D,MAAMC,MAAM,GAAGD,QAAQ,GAAG,MAAM,GAAG,OAAO;EAC1C,OAAO,MAAMzB,WAAW,CAAC,GAAGD,YAAY,UAAUuB,MAAM,IAAII,MAAM,EAAE,EAAE;IACpET,MAAM,EAAE;EACV,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMU,WAAW,GAAG,MAAOL,MAAM,IAAK;EAC3C,OAAO,MAAMtB,WAAW,CAAC,GAAGD,YAAY,UAAUuB,MAAM,UAAU,EAAE;IAClEL,MAAM,EAAE;EACV,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMW,WAAW,GAAG,MAAON,MAAM,IAAK;EAC3C,OAAO,MAAMtB,WAAW,CAAC,GAAGD,YAAY,UAAUuB,MAAM,OAAO,CAAC;AAClE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}